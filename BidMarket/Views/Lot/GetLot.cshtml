@using Microsoft.AspNetCore.Identity;
@inject UserManager<AppUser> uM;
@model Lot
@{

}


<div class="row container text-center" id="app">

    
        <div class="col">
        <div class="card-body">
            
            <div id="carouselExampleIndicators" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-indicators">

                    @{
                        if (Model.Images != null)
                        {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 0"></button>

                            for (int i = 1; i < Model.Images.Count; i++)
                            {
                                <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" aria-label="Slide @i"></button>
                            }
                        }
                    }
                </div>
                <div class="carousel-inner text-center" style="justify-content: center;align-items: center;">
                    @{
                        if (Model.Images != null)
                        {
                            <div class="carousel-item active">
                                <img src="@Url.Action("MegaImageRead", "Lot" , new {id = Model.Id, number = 0})"
                                     class="img-fluid" alt="img" style="max-height:500px">
                            </div>
                            for (int i = 1; i < Model.Images.Count; i++)
                            {
                                <div class="carousel-item">
                                    <img src="@Url.Action("MegaImageRead", "Lot" , new {id = Model.Id, number = i})"
                                         class="img-fluid" style="max-height:500px" alt="img">
                                </div>
                            }
                        }

                    }

                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
            </div>
        </div>
        <div class="col">
            <div class="card-body">
            <form class="align-content-lg-start">
                <div>
            <input hidden id="lotId" v-model="lotId" value="@Model.Id"/>
            <h5 class="card-title"> @Model.Name </h5>
                <p><strong>Текущая цена @Model.CurrentPrice</strong></p>
                <p >Время до конца: {{time}}</p>

                <p >Описание: @Model.Description</p>
                
                
                    
                    <a class="btn btn-outline-primary" asp-action="GetUser" asp-controller="User" asp-route-id="@Model.Seller.Id">Связаться с автором лота</a>
                </div>  
            </form>
                    <div v-if="winner==null" class="w-100 justify-content-center form-group text-center">
                
                
                @{
                    var user = (await uM.GetUserAsync(User));
                }
                @if (user.Id != Model.Seller.Id && Model.StartTime < DateTime.Now.AddHours(3) && Model.EndTime > DateTime.Now.AddHours(3))
                {
                    <input class="form-control text-center justify-content-center" id="betS" />
                    <button type="button" onclick="makeBet" id="clickMe" class="btn btn-primary">Сделать ставку</button>
                }
            </div>
            <div v-else>
                <h3>Аукцион окончен!!! Победитель: {{winner.name}}</h3>
            </div>
            
            @if(Model.Winner != null && Model.Winner.Id == user.Id)
            {
                if(Model.Payed.HasValue && Model.Payed.Value)
                {
                    <h4 class="text-dark">Поздравляем вы выйграли и оплатили лот</h4>

                    if(Model.Confirmed.HasValue && Model.Confirmed.Value)
                    {
                        <p class="text-dark">Спасибо за использование нашего сервиса</p>
                    }
                    else
                    {
                        <h4 class="text-dark">При получение выйгранного лота от продавца, подтвердите сделку</h4>
                        <form method="post">
                            <button class="m-1 btn btn-outline-info" asp-action="ConfirmLot" asp-controller="Lot" asp-route-id="@Model.Id">Я получил выйгранный лот</button>
                        </form>
                    }
                }
                else
                {
                    <form method="post">
                        <button class="btn btn-primary" asp-controller="Payment" asp-action="Pay" asp-route-id="@Model.Id">Оплатить</button>
                    </form>
                }

            }
            else if (Model.Winner != null && Model.Winner.Id != user.Id)
            {
                if (Model.Payed.HasValue && Model.Payed.Value)
                {
                    <h4 class="text-dark">Лот оплачен</h4>
                }
                else
                {
                    <h4 class="text-dark">Лот ожидает оплаты</h4>
                }
            }
            <div>
                <div v-for="bet in bets" class="card shadow-lg m-1">
                    <h5 class="card-title">Размер ставки {{bet.size}} </h5>
                    <h5 class="card-text">Пользователь {{bet.byer.name}} </h5>
                    <h5 class="card-text">Время ставки {{bet.time}} </h5>
                </div>
            </div>
           
                
            
        </div>
    </div>
    
  
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="~/lib/vue/vue.js"></script>

<script>
    
    var app = new Vue({
        el: '#app',
        data: {
               bets:[],
               a:100,
               winner:null,
               time:null
        },
        mounted() {            
            var lotId = document.getElementById("lotId").getAttribute("value")
            setInterval(()=>this.fetchData(lotId), 1000);
            setInterval(()=>this.winLot(lotId), 1000);
            setInterval(() => this.timeToEnd(lotId), 1000);
            document.getElementById("clickMe").onclick = this.makeBet;
        },
        methods: {
            
            fetchData(lotId) {
                $.ajax({
                    url: "@Url.Action("getallbets","bet")", // Замените на URL вашего API
                    data: { lotId: lotId }, // Передача параметра lotId
                    dataType: 'json',
                    method: 'GET',
                    success: function (data) {
                        this.bets = data;
                    }.bind(this),
                    error: function (xhr, status, error) {
                        console.log('Статус ошибки: ' + status);
                        console.log('Тип ошибки: ' + error);
                        console.log('Текст ошибки: ' + xhr.responseText);
                    }
                });
            },
            winLot(lotId) {
                $.ajax({
                    url: "@Url.Action("winlot","lot")", // Замените на URL вашего API
                    data: { lotId: lotId }, // Передача параметра lotId
                    dataType: 'json',
                    method: 'POST',
                    success: function (data) {
                        this.winner = data;
                    }.bind(this),
                    error: function (xhr, status, error) {
                        console.log('Статус ошибки: ' + status);
                        console.log('Тип ошибки: ' + error);
                        console.log('Текст ошибки: ' + xhr.responseText);
                    }
                });
            },
            timeToEnd(lotId) {
                $.ajax({
                    url: "@Url.Action("timeToEnd","lot")", // Замените на URL вашего API
                    data: { lotId: lotId }, // Передача параметра lotId
                    dataType: 'json',
                    method: 'POST',
                    success: function (data) {
                        this.time = data
                    }.bind(this),
                    error: function (xhr, status, error) {
                        console.log('Статус ошибки: ' + status);
                        console.log('Тип ошибки: ' + error);
                        console.log('Текст ошибки: ' + xhr.responseText);
                    }
                });
            },
            makeBet() {
                console.log(document.getElementById("betS"))
                const bet = {
                    lotId: document.getElementById("lotId").getAttribute("value"),
                    size: document.getElementById("betS").value
                }
                $.ajax({
                    url: "@Url.Action("makebet","bet")", // Замените на URL вашего API
                    data: { createBet: bet }, // Передача параметра lotId
                    dataType: 'json',
                    method: 'POST',
                    success: function (data) {
                       
                    }.bind(this),
                    error: function (xhr, status, error) {
                        console.log('Статус ошибки: ' + status);
                        console.log('Тип ошибки: ' + error);
                        console.log('Текст ошибки: ' + xhr.responseText);
                    }
                });
            }
        },
    });
</script>
